{"version":3,"sources":["individual-currency/ModalExampleDocument.js","individual-currency/TickerFilterComponent.js","common/IntervalFilter.js","common/DateFilter.js","individual-currency/TickerAnalysisContext.js","individual-currency/TickerTableDataComponent.js","individual-currency/MACDChart.js","individual-currency/RSIChart.js","individual-currency/CandleStickChart.js","individual-currency/StochasticOscillatorChart.js","individual-currency/TickerChart.js","common/Information.js","individual-currency/MAFilterComponent.js","individual-currency/MACDFilterComponent.js","individual-currency/RSIFilterComponent.js","individual-currency/StochasticOscillatorFilterComponent.js","individual-currency/TickerAnalysisComponent.js","rules/RuleStatistics.js","rules/Rules.js","main/App.js","index.js"],"names":["ModalExampleDocument","props","state","exampleData","fileDownloadUrl","fileName","downloadData","bind","this","setState","symbol","currency","collectionType","user","functions","GetExampleDocument","then","result","JSON","stringify","output","blob","Blob","URL","createObjectURL","dofileDownload","click","revokeObjectURL","Modal","open","modalOpen","closeOnEscape","closeOnRootNodeClick","onClose","handleClose","onMount","fetchData","Header","Content","image","scrolling","Description","showLineNumbers","language","style","dark","Actions","Button","onClick","primary","Icon","name","className","download","href","ref","e","React","Component","TickerFilter","currencies","isModalOpen","console","log","GetSymbols","map","push","_id","length","value","propagateChoiceIfNotInTheContext","symbolHandler","functionToCall","Form","Field","required","Group","Dropdown","width","label","placeholder","search","selection","options","onChange","event","data","Popup","hideOnScroll","flowing","hoverable","trigger","fluid","icon","labelPosition","color","size","Grid","relaxed","columns","centered","divided","Column","textAlign","as","dropDownOptionForIntervalValues","key","text","IntervalFilter","sendController","handleChange","dropDownOptionForDateFilterValues","DateFilter","TickerAnalysisContext","createContext","TickerTableData","Table","celled","striped","Row","HeaderCell","context","enabledFilters","movingAverage","movingAverageFilters","macd","numOfPrevDataPointsMacdLine1","numOfPrevDataPointsMacdLine2","numOfPrevDataPointsMacdSignal","rsi","Body","undefined","currencyHistoryDataForTable","item","index","Cell","moment","time","local","format","close","high","low","movingAverage01","movingAverage02","expMovingAverage01","expMovingAverage02","macdLine","macdSignal","macdHistogram","gain","loss","avgGain","avgLoss","contextType","MACDChart","colors","seriesIndex","w","chart","id","type","animations","enabled","xaxis","datetimeUTC","crosshairs","show","floating","tooltip","yaxis","labels","minWidth","formatter","forceNiceScale","seriesName","position","dropShadow","title","align","stroke","curve","legend","useSeriesColors","series","macdLineData","macdSignalData","macdHistogramData","height","RSIChart","rsiData","point","x","CandleStickChart","candleStickData","movingAverage01Data","movingAverage02Data","expMovingAverage01Data","expMovingAverage02Data","StochasticOscillatorChart","stochasticOscillatorDataKValue","stochasticOscillatorDataDValue","TickerChart","chartData","candleStick","stochasticOscillator","stocOsscK","stocOsscD","Information","handleClick","titleProps","newIndex","activeIndex","Accordion","Title","active","docco","query","MAFilter","inline","Checkbox","checked","number","toggleMovingAverage","Input","disabled","setMovingAverageFilter","currentTarget","MACDFilter","toggleMacd","setNumOfPrevDataPointsMacdLine1","setNumOfPrevDataPointsMacdLine2","setNumOfPrevDataPointsMacdSignal","RSIFilter","toggleRSI","numOfPrevDataPointsRSI","setNumOfPrevDataPointsRSI","StochasticOscillatorFilter","toggleStochasticOscillator","numOfPrevDataPointsStochasticOscillator","setNumOfPrevDataPointsnumOfPrevDataPointsStochasticOscillator","TickerAnalysisComponent","defaultQuery","renderTable","renderChart","queryIsRunning","interval","hourFilter","isStatisticsAccordionOpen","latestInformation","isQueryRunning","latestCurrencyDateLocalStr","firstCurrencyDateLocalStr","htmlTableData","currencyData","GetLatestTSCollectionStatistics","latestCurrencyDate","firstCurrencyDate","totalNumberOfRecords","totalNumberOfBuckets","fetchLatestInfo","parameterObject","candleStickUnit","candleStickInterval","ma1","parseInt","ma2","ema1","ema2","macd1","macd2","stocOsc","GetTickerReport","currencyHistory","optimizedArray","slice","Math","max","localTimeStr","utc","movingAverageData_01","movingAverageData_02","expMovingAverageData_01","expMovingAverageData_02","stocOsscDataKValue","stocOsscDataDValue","stocOsscKValue","stocOsscDValue","Provider","Object","assign","_tmp_moving_average","newState","Segment","Label","Detail","handleSymbol","handleHourFilter","handleInterval","fetchAndRender","Dimmer","Loader","indeterminate","RuleStatistics","statsData","statisticsData","arrayData","lastPrice","method","methodValue","threshold","conditionsMet","ObjectId","Realm","dropDownOptionForMethods","dropDownOptionComparison","Rules","handleTabChange","activeTab","fetchRules","isStatisticsLoaded","comparison","ruleName","recentNumberOfDataPointsToAnalyze","isAddRuleSuccessful","rules","isRuleDeleteVerificationOpen","executionFrequency","isStatisticQueryRunning","mongoClient","db","collection","find","rule","numOfDataPointsToAnalyze","createdAt","Date","insertOne","insertedId","addRuleMessage","addRuleMessageHeader","deleteOne","deletedCount","filter","removeRuleStatistics","Container","Tab","onTabChange","panes","menuItem","render","handleRuleNameChange","widths","stepAmount","minValue","maxValue","compact","handleMethod","Divider","handleComparison","valueType","precision","saveRule","hidden","Message","success","negative","header","content","fetchStatisticsForARule","circular","chosenRuleId","chosenRuleName","positive","removeRule","app","window","REALM_APP_ID","styles","logoStyles","Login","setUser","loginAnonymous","a","logIn","anonymous","Menu","target","rel","alt","src","exact","path","to","display","App","useState","currentUser","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.939e4151.chunk.js","sourcesContent":["import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Modal,  Button, Icon} from 'semantic-ui-react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n\n\nclass ModalExampleDocument extends React.Component {\n\n    constructor(props) {\n      super(props)\n\n        this.state = {\n          exampleData: \"\",\n          fileDownloadUrl: \"\",\n          fileName: \"\"\n        }\n\n        this.downloadData = this.downloadData.bind(this);\n\n    }\n\n    fetchData() {\n\n      this.setState({\n        exampleData: \"Please wait it's being loaded ...\"\n      });\n\n      let symbol = `${this.props.currency}`\n      let collectionType = `${this.props.collectionType}`\n      this.props.user.functions.GetExampleDocument(symbol, collectionType).then(\n        result => {\n          this.setState({\n            exampleData: JSON.stringify(result, null, 4)\n          });\n        }\n      )\n    }\n\n    downloadData() { \n        var output = this.state.exampleData\n        const blob = new Blob([output]);\n        const fileDownloadUrl = URL.createObjectURL(blob);\n        const fileName = this.props.currency + \"_example.json\"\n        this.setState ({fileDownloadUrl: fileDownloadUrl, fileName: fileName}, \n          () => {\n            this.dofileDownload.click(); \n            URL.revokeObjectURL(fileDownloadUrl);  // free up storage--no longer needed.\n            this.setState({fileDownloadUrl: \"\"})\n        })    \n    }\n\n\n\n    render() {\n    return (\n      <Modal\n        open={this.props.modalOpen}\n        closeOnEscape={true}\n        closeOnRootNodeClick={true}\n        onClose={this.props.handleClose}\n        onMount={() => this.fetchData()}\n      >\n        <Modal.Header>Example Data</Modal.Header>\n        <Modal.Content image scrolling>\n  \n          <Modal.Description>\n          <SyntaxHighlighter showLineNumbers={true} language=\"json\" style={dark}>\n              {this.state.exampleData}  \n          </SyntaxHighlighter>  \n  \n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button onClick={() => this.downloadData()} primary>\n            Download Example Set <Icon name='download' />\n          </Button>\n          <a className=\"hidden\"\n             download={this.state.fileName}\n             href={this.state.fileDownloadUrl}\n             ref={e=>this.dofileDownload = e}\n          > </a>\n          <Button onClick={() => this.props.handleClose()} primary>\n            Close <Icon name='window close' />\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    )}\n  }\n\n\nexport default ModalExampleDocument","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Form, Header, Popup, Button, Grid, Icon} from 'semantic-ui-react';\nimport ModalExampleDocument from './ModalExampleDocument';\n\nclass TickerFilter extends React.Component {\n    \n    constructor(props) {\n        super(props)\n        this.state = {\n            currencies : [\n            {\n                \"key\" : 1,\n                \"text\" : \"Loading from database ...\",\n                \"value\" : \"N/A\"\n            }\n            ],\n            isModalOpen : false,\n            currency: \"\",\n            collectionType: \"timeseries\"\n        }\n    }\n\n\n    componentDidMount() {\n        let currencies = [];\n        console.log(\"Function called for currencies\")\n        this.props.user.functions.GetSymbols(null).then(\n            result => {\n                    result.map((currency) => (currencies.push({\"text\": currency._id, \"value\" : currency._id})))\n                    console.log(`Number of currencies retrieved from database: ${currencies.length}`);\n                    this.setState({\n                        currencies: currencies,\n                        currency: currencies[0].value\n                    });\n                    this.propagateChoiceIfNotInTheContext(currencies[0].value, this.props.symbolHandler)\n            }\n        );\n    }\n\n\n    propagateChoiceIfNotInTheContext (value, functionToCall) {\n        functionToCall(value)\n    }\n\n    render () {\n        \n        return (\n\n                    <>\n                    <Form.Field required>\n                            <Form.Group>\n                                <Form.Dropdown \n                                    required\n                                    width={8}\n                                    label=\"Currency\"\n                                    placeholder='Loading from Database...' \n                                    search\n                                    selection \n                                    options={this.state.currencies} \n                                    value={this.state.currency}\n                                    onChange={\n                                        (event,data) => {\n                                            this.setState({currency: data.value})\n                                            this.propagateChoiceIfNotInTheContext(data.value, this.props.symbolHandler)\n                                                \n                                    }}\n                                />                                        \n\n                                <Popup hideOnScroll flowing hoverable trigger={<Form.Button fluid icon labelPosition='left' color='green' size=\"small\" label=\"&nbsp;\"><Icon name='search'/>Show Example Data</Form.Button>}>\n                                    <Grid relaxed columns={2} centered divided>\n                                    <Grid.Column textAlign='center' width={6}>\n                                        <Header as='h4'>Time-Series Collection</Header>\n                                        <p>\n                                            From the collection where the application interacts\n                                        </p>\n                                        <Button icon labelPosition='right' color='green' onClick={() => this.setState({isModalOpen:true, collectionType:\"timeseries\"})}><Icon name='chart line'/>Show Data</Button> \n                                    </Grid.Column>\n                                    <Grid.Column textAlign='center' width={6}>\n                                        <Header as='h4'>System Bucketed Collection</Header>\n                                        <p>\n                                            From the collection where the data is actually stored\n                                        </p>\n                                        <Button icon labelPosition='right' color='green' onClick={() => this.setState({isModalOpen:true, collectionType:\"bucketed\"})}><Icon name='list'/>Show Data</Button>\n                                    </Grid.Column>\n                                    </Grid>\n                                </Popup>\n                                \n                            </Form.Group>\n                    </Form.Field>\n                    <ModalExampleDocument\n                        user={this.props.user}\n                        modalOpen={this.state.isModalOpen}\n                        handleClose={\n                            () => {\n                              this.setState({ isModalOpen: false })\n                            }\n                          }\n                        currency={this.state.currency}\n                        collectionType={this.state.collectionType}\n                    \n                    />\n                    </>\n                    \n        )\n    }\n}\n\nexport default TickerFilter","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Dropdown, Form } from 'semantic-ui-react';\n\nconst dropDownOptionForIntervalValues = [\n    { key: 1, text: '1 Min', value: 1 },\n    { key: 2, text: '3 Min', value: 3 },\n    { key: 3, text: '5 Min', value: 5 },\n    { key: 4, text: '10 Min', value: 10 },\n    { key: 5, text: '15 Min', value: 15 },\n    { key: 6, text: '30 Min', value: 30 },\n    { key: 7, text: '1 Hour', value: 60 },\n    { key: 8, text: '4 Hour', value: 240 },\n    { key: 9, text: '8 Hour', value: 480 },\n    { key: 10, text: '24 Hour', value: 1440 }\n  ]\n\n  class IntervalFilter extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            value: 1\n        }\n    }\n\n    handleChange (event, data) {\n        // update state locally\n        this.setState({value: data.value})\n        \n        // send state to parent\n        this.props.sendController(data.value)\n    }\n\n    render () {\n        return (\n                    <Form.Field required>\n                            <label>Interval</label>\n                            <Dropdown \n                                selection\n                                options={dropDownOptionForIntervalValues}\n                                name=\"dropdown_interval_value\"  \n                                onChange={(event, data) => this.handleChange(event,data)}\n                                value={this.state.value} \n                            />\n                    </Form.Field>\n        )\n    }\n}\n\n\n\nexport default IntervalFilter","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Form, Popup, Icon } from 'semantic-ui-react';\n\nconst dropDownOptionForDateFilterValues = [\n    { key: 1, text: 'Last Hour', value: 1 },\n    { key: 2, text: 'Last 3 Hours', value: 3 },\n    { key: 3, text: 'Last 12 Hours', value: 12 },\n    { key: 4, text: 'Last 24 Hours', value: 24 },\n    { key: 5, text: 'Last 3 Days', value: 3*24 },\n    { key: 6, text: 'Last 7 Days', value: 7*24 },\n    { key: 7, text: 'Last 15 Days', value: 15*24 },\n    { key: 8, text: 'Last 30 Days', value: 30*24 }    \n]\n\n  class DateFilter extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            value: 1\n        }\n    }\n\n    handleChange (event, data) {\n        // update state locally\n        this.setState({value: data.value})\n        \n        // send state to parent\n        this.props.sendController(data.value)\n    }\n\n    render () {\n        return (\n                  \n                    <Form.Field required>\n                        <Form.Group>\n                            <Form.Dropdown \n                                selection\n                                required\n                                width={8}\n                                label=\"Date Filter\"\n                                options={dropDownOptionForDateFilterValues}\n                                name=\"dropdown_date_filter_value\"  \n                                onChange={(event, data) => this.handleChange(event,data)}\n                                value={this.state.value} \n                            />\n                      \n\n                            <Popup hideOnScroll flowing hoverable \n                            trigger={<Form.Button fluid icon labelPosition='left' color='green' size=\"small\" label=\"&nbsp;\"><Icon name='info circle'/>Data Source Info</Form.Button>}>\n                                <p><b>Last hour:</b> Brings only last hour of data from MongoDB Atlas Cluster</p>\n                                <p><b>Last 3 Hours:</b> Brings only last 3 hours of data from MongoDB Atlas Cluster</p>\n                                <p><b>Last 12 Hours:</b> Brings only last 12 hours of data from MongoDB Atlas Cluster</p>\n                                <p><b>Last 24 Hours:</b> Brings only last 24 hours of data from MongoDB Atlas Cluster</p>\n                                <p><b>Last 3 Days:</b> Brings only last 72 (24*3) hours of data from MongoDB Atlas Cluster</p>\n                                <p><b>Last 7 Days:</b> Brings only last 168 (24*7) hours of data both from MongoDB Atlas Cluster and Online Archive</p>\n                                <p><b>Last 15 Days:</b> Brings only last 360 (24*15) hours of data both from MongoDB Atlas Cluster and Online Archive</p>\n                                <p><b>Last 30 Days:</b> Brings only last 720 (24*30) hours of data both from MongoDB Atlas Cluster and Online Archive</p>\n                            </Popup>\n                        </Form.Group>\n                    </Form.Field>\n        )\n    }\n}\n\n\n\nexport default DateFilter","import React from 'react';\n\n// this is the equivalent to the createStore method of Redux\n// https://redux.js.org/api/createstore\n\nconst TickerAnalysisContext = React.createContext();\n\nexport default TickerAnalysisContext;","import React, {Fragment} from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Table } from 'semantic-ui-react';\nimport TickerAnalysisContext from './TickerAnalysisContext';\nimport moment from 'moment'\n\nclass TickerTableData extends React.Component {\n\n    render () {\n\n        return (\n            <Table celled striped>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Time</Table.HeaderCell>\n                <Table.HeaderCell>Currency</Table.HeaderCell>\n                <Table.HeaderCell>Close Price</Table.HeaderCell>\n                <Table.HeaderCell>Open Price</Table.HeaderCell>\n                <Table.HeaderCell>High Price</Table.HeaderCell>\n                <Table.HeaderCell>Low Price</Table.HeaderCell>\n                {this.context.enabledFilters.movingAverage[0] ? \n                    <Table.HeaderCell>MA ({this.context.movingAverageFilters[0]})</Table.HeaderCell> \n                    : null\n                }\n                {this.context.enabledFilters.movingAverage[1] ? \n                    <Table.HeaderCell>MA ({this.context.movingAverageFilters[1]})</Table.HeaderCell> \n                    : null\n                }\n                {this.context.enabledFilters.movingAverage[2] ? \n                    <Table.HeaderCell>EMA ({this.context.movingAverageFilters[2]})</Table.HeaderCell> \n                    : null\n                }\n                {this.context.enabledFilters.movingAverage[3] ? \n                    <Table.HeaderCell>EMA ({this.context.movingAverageFilters[3]})</Table.HeaderCell> \n                    : null\n                }\n                {this.context.enabledFilters.macd ?\n                    <Fragment>\n                        <Table.HeaderCell>MACD LINE ({this.context.numOfPrevDataPointsMacdLine1},{this.context.numOfPrevDataPointsMacdLine2})</Table.HeaderCell> \n                        <Table.HeaderCell>MACD SIGNAL LINE({this.context.numOfPrevDataPointsMacdSignal})</Table.HeaderCell> \n                        <Table.HeaderCell>MACD HISTOGRAM</Table.HeaderCell> \n                    </Fragment>\n                    : null\n                }\n                {this.context.enabledFilters.rsi ? \n                    \n                    <Fragment>\n                        <Table.HeaderCell>Gain</Table.HeaderCell>\n                        <Table.HeaderCell>Loss</Table.HeaderCell> \n                        <Table.HeaderCell>Avg Gain</Table.HeaderCell>\n                        <Table.HeaderCell>Avg Loss</Table.HeaderCell>\n                        <Table.HeaderCell>RSI</Table.HeaderCell> \n                    </Fragment>\n                    : null\n                }\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {this.context.currencyHistoryDataForTable !== undefined ?\n                    this.context.currencyHistoryDataForTable.map((item, index) => \n                            <Table.Row key={index}> \n                                <Table.Cell>{moment(item._id.time).local().format()}</Table.Cell>\n                                <Table.Cell>{item._id.symbol}</Table.Cell>\n                                <Table.Cell>{item.close}</Table.Cell>\n                                <Table.Cell>{item.open}</Table.Cell>\n                                <Table.Cell>{item.high}</Table.Cell>\n                                <Table.Cell>{item.low}</Table.Cell>\n                                {this.context.enabledFilters.movingAverage[0] ? \n                                    <Table.Cell>{item.movingAverage01}</Table.Cell>\n                                    : null\n                                }\n                                {this.context.enabledFilters.movingAverage[1] ? \n                                    <Table.Cell>{item.movingAverage02}</Table.Cell>\n                                    : null\n                                }\n                                {this.context.enabledFilters.movingAverage[2] ? \n                                    <Table.Cell>{item.expMovingAverage01}</Table.Cell>\n                                    : null\n                                }\n                                {this.context.enabledFilters.movingAverage[3] ? \n                                    <Table.Cell>{item.expMovingAverage02}</Table.Cell>\n                                    : null\n                                }\n                                {this.context.enabledFilters.macd ? \n                                    <Fragment>\n                                        <Table.Cell>{item.macdLine}</Table.Cell>\n                                        <Table.Cell>{item.macdSignal}</Table.Cell>\n                                        <Table.Cell>{item.macdHistogram}</Table.Cell>\n                                    </Fragment>\n                                    : null\n                                }\n                                {this.context.enabledFilters.rsi > 0 ? \n                                    <Fragment>\n                                        <Table.Cell>{item.gain}</Table.Cell>\n                                        <Table.Cell>{item.loss}</Table.Cell>\n                                        <Table.Cell>{item.avgGain}</Table.Cell>\n                                        <Table.Cell>{item.avgLoss}</Table.Cell>\n                                        <Table.Cell>{item.rsi}</Table.Cell>\n                                    </Fragment>\n                                    : null\n                                }\n                            </Table.Row> \n                    ) \n                : null\n\n                }\n            </Table.Body>\n            </Table>\n        )\n    }\n}\n\nTickerTableData.contextType = TickerAnalysisContext\nexport default TickerTableData ","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport Chart from \"react-apexcharts\";\n\n\n\n\nclass MACDChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: {\n                colors: [\n                  // provides different coloring for MACD (macdline, signal line, programmatic histogram (if the value is less than 0 then histogram bar gets red))\n                  function ({ value, seriesIndex, w }) {\n                      if (seriesIndex === 0) return '#0000FF'\n                      else if (seriesIndex === 1) return '#FF0000'\n                      else if (seriesIndex === 2) {\n                          if (value > 0 ) return '#00FF00'\n                          else return '#FF0000'\n                      }\n                    }\n                ],\n                chart: {\n                  id: \"macd-histogram\",\n                  type: \"line\",\n                  animations: {\n                    enabled: false\n                  }\n                },\n                xaxis: {\n                  type: 'category',\n                  label: {\n                    datetimeUTC: false\n                  },\n                  crosshairs: {\n                    show: true\n                  },\n                  floating: false,\n                  tooltip: {\n                    enabled: true\n                  }\n                },\n                yaxis: {\n                  labels: {\n                    minWidth: 1,\n                    formatter: (value) => { return value }\n                  },\n                  forceNiceScale: true,\n                  tooltip: {\n                    enabled: true\n                  },\n                  seriesName: \"histogram\",\n                  crosshairs: { \n                    show: true,\n                    position: 'front',\n                    dropShadow :{\n                      enabled: true\n                    }\n                  },\n                  floating: false\n                },\n                title: {\n                  text: 'Macd Histogram',\n                  align: 'left'\n                },\n                stroke: {\n                  curve : \"smooth\",\n                  width : 3\n                },\n                legend: {\n                  show: true,\n                  labels: {\n                    useSeriesColors: true\n                  }\n                }\n          },\n          series: [{\n            name: 'MACD Line',\n            type: 'line',\n            data: this.props.macdLineData\n          },{\n            name: 'MACD Signal',\n            type: 'line',\n            data: this.props.macdSignalData\n            \n          },{\n            name: 'Histogram',\n            type: 'column',\n            data: this.props.macdHistogramData\n          }]\n        \n        }\n    }\n\n\n    render () {\n        return (\n            <Chart\n            options={this.state.options}\n            type=\"line\"\n            series={this.state.series}\n            width=\"100%\"\n            height=\"400\"\n        />\n        )\n    }\n}\n\n\nexport default MACDChart\n","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport Chart from \"react-apexcharts\";\n\nclass RSIChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: {\n                chart: {\n                  id : \"rsi-line\",\n                  type: \"chart\",\n                  animations: {enabled:false}\n                },\n                xaxis: {\n                  type: 'category',\n                  label: {\n                    datetimeUTC: false\n                  },\n                  crosshairs: {\n                    show: true\n                  },\n                  floating: false,\n                  tooltip: {\n                    enabled: true\n                  }\n                },\n                yaxis: {\n                  labels: {\n                    minWidth: 1,\n                    formatter: (value) => { return value }\n                  },\n                  forceNiceScale: true,\n                  tooltip: {\n                    enabled: true\n                  },\n                  seriesName: \"rsi-data\",\n                  crosshairs: { \n                    show: true,\n                    position: 'front',\n                    dropShadow :{\n                      enabled: true\n                    }\n                  },\n                  floating: false\n                },\n                title: {\n                  text: 'RSI',\n                  align: 'left'\n                },\n                stroke: {\n                  curve : \"smooth\",\n                  width : 3\n                },\n                legend: {\n                  show: true,\n                  labels: {\n                    useSeriesColors: true\n                  }\n                }\n          },\n          series: [\n            {\n              name: 'rsi-data',\n              type: 'line',\n              data: this.props.rsiData\n            },\n            {\n              name: 'rsi-data-upper-threshold',\n              type: 'line',\n              data: this.props.rsiData.map((point) => { return {\"x\": point.x, \"y\" : 70}})\n            },\n            {\n              name: 'rsi-data-lower-threshold',\n              type: 'line',\n              data: this.props.rsiData.map((point) => { return {\"x\": point.x, \"y\" : 30}})\n            }\n          ]\n        \n        }\n    }\n\n\n    render () {\n        return (\n            <Chart\n            options={this.state.options}\n            type=\"line\"\n            series={this.state.series}\n            width=\"100%\"\n            height=\"400\"\n        />\n        )\n    }\n}\n\n\nexport default RSIChart\n","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport Chart from \"react-apexcharts\";\n\nclass CandleStickChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: {\n                colors: [\"#f98815\", \"#158bf9\", \"#15f9f3\", \"#ee240e\" ],\n                chart: {\n                  id: \"candle-stick\",\n                  height: 600,\n                  type: \"candlestick\",\n                  animations: {\n                    enabled: false\n                  }\n                },\n                tooltip: {\n                  enabled: true,\n                },\n                xaxis: {\n                  type: 'category',                 \n                  tooltip: {\n                    enabled: true\n                  }\n                },\n                yaxis: {\n                  tooltip: {\n                    enabled: true\n                  },\n                  labels: {\n                    minWidth: 1,\n                    formatter: (value) => { return value }\n                  },\n                  seriesName: \"candlestick\"\n                },\n                title: {\n                  text: 'CandleStick Chart',\n                  align: 'left'\n                },\n                stroke: {\n                  curve : \"smooth\",\n                  width : 3,\n                  colors: [\"#f98815\", \"#158bf9\", \"#15f9f3\", \"#ee240e\" ]\n                },\n                legend: {\n                  show: true,\n                  labels: {\n                    useSeriesColors: true\n                  }\n                }\n          },\n          series: [{\n            name: 'Candle Stick',\n            type: 'candlestick',\n            data: this.props.candleStickData\n          },{\n            name: 'MA - 1',\n            type: 'line',\n            data: this.props.movingAverage01Data\n          },{\n            name: 'MA - 2',\n            type: 'line',\n            data: this.props.movingAverage02Data\n          },\n          {\n            name: 'EMA -  1',\n            type: 'line',\n            data: this.props.expMovingAverage01Data\n          },\n          {\n            name: 'EMA - 2',\n            type: 'line',\n            data: this.props.expMovingAverage02Data\n          }]\n        \n        }\n    }\n\n\n    render () {\n        return (\n            <Chart\n            options={this.state.options}\n            type=\"candlestick\"\n            series={this.state.series}\n            width=\"100%\"\n            height=\"600\"\n        />\n        )\n    }\n}\n\n\nexport default CandleStickChart\n","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport Chart from \"react-apexcharts\";\n\nclass StochasticOscillatorChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: {\n                chart: {\n                  id : \"stochastic-oscillator-line\",\n                  type: \"chart\",\n                  animations: {enabled:false}\n                },\n                xaxis: {\n                  type: 'category',\n                  label: {\n                    datetimeUTC: false\n                  },\n                  crosshairs: {\n                    show: true\n                  },\n                  floating: false,\n                  tooltip: {\n                    enabled: true\n                  }\n                },\n                yaxis: {\n                  labels: {\n                    minWidth: 1,\n                    formatter: (value) => { return value }\n                  },\n                  forceNiceScale: true,\n                  tooltip: {\n                    enabled: true\n                  },\n                  seriesName: \"stochastic-oscillator-data\",\n                  crosshairs: { \n                    show: true,\n                    position: 'front',\n                    dropShadow :{\n                      enabled: true\n                    }\n                  },\n                  floating: false\n                },\n                title: {\n                  text: 'Stochastic Oscillator',\n                  align: 'left'\n                },\n                stroke: {\n                  curve : \"smooth\",\n                  width : 3\n                },\n                legend: {\n                  show: true,\n                  labels: {\n                    useSeriesColors: true\n                  }\n                }\n          },\n          series: [\n            {\n              name: 'stochastic-oscillator-data-kvalue',\n              type: 'line',\n              data: this.props.stochasticOscillatorDataKValue\n            },\n            {\n                name: 'stochastic-oscillator-data-dvalue',\n                type: 'line',\n                data: this.props.stochasticOscillatorDataDValue\n            },\n            {\n              name: 'stochastic-oscillator-data-upper-threshold',\n              type: 'line',\n              data: this.props.stochasticOscillatorDataKValue.map((point) => { return {\"x\": point.x, \"y\" : 80}})\n            },\n            {\n              name: 'stochastic-oscillator-data-lower-threshold',\n              type: 'line',\n              data: this.props.stochasticOscillatorDataKValue.map((point) => { return {\"x\": point.x, \"y\" : 20}})\n            }\n          ]\n        \n        }\n    }\n\n\n    render () {\n        return (\n            <Chart\n            options={this.state.options}\n            type=\"line\"\n            series={this.state.series}\n            width=\"100%\"\n            height=\"400\"\n        />\n        )\n    }\n}\n\n\nexport default StochasticOscillatorChart\n","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport TickerAnalysisContext from './TickerAnalysisContext';\nimport MACDChart from './MACDChart'\nimport RSIChart from './RSIChart'\nimport CandleStickChart from './CandleStickChart';\nimport StochasticOscillatorChart from './StochasticOscillatorChart'\nclass TickerChart extends React.Component {\n    \n  constructor(props) {\n      super(props);\n      this.state = {}\n    }\n\n\n    render() {\n\n      return (\n        <div className=\"app\">\n          <div className=\"row\">\n            <div className=\"mixed-chart\">\n\n            <CandleStickChart\n              candleStickData={this.context.chartData.candleStick}\n              movingAverage01Data={this.context.chartData.movingAverage01}\n              movingAverage02Data={this.context.chartData.movingAverage02}\n              expMovingAverage01Data={this.context.chartData.expMovingAverage01}\n              expMovingAverage02Data={this.context.chartData.expMovingAverage02}\n            />\n\n            {this.context.enabledFilters.rsi ?\n              <RSIChart\n              rsiData={this.context.chartData.rsi}\n              />\n            : null}\n\n            {this.context.enabledFilters.macd ?\n              <MACDChart\n              macdLineData={this.context.chartData.macdLine}\n              macdSignalData={this.context.chartData.macdSignal}\n              macdHistogramData={this.context.chartData.macdHistogram}\n              />\n            :null}\n\n            {this.context.enabledFilters.stochasticOscillator ?\n              <StochasticOscillatorChart\n              stochasticOscillatorDataKValue={this.context.chartData.stocOsscK}\n              stochasticOscillatorDataDValue={this.context.chartData.stocOsscD}\n              />\n            : null}\n            </div>\n          </div>\n        </div>\n      );\n  }\n}\n  \n  \nTickerChart.contextType = TickerAnalysisContext\nexport default TickerChart;","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Accordion, Icon } from 'semantic-ui-react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nclass Information extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeIndex : 0\n        }\n\n    }\n    \n\n    handleClick = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n        this.setState({ activeIndex: newIndex })\n    }\n    \n    render() {\n        const { activeIndex } = this.state\n        return (\n            <Accordion>\n                <Accordion.Title\n                    active={activeIndex === 0}\n                    index={0}\n                    onClick={this.handleClick}>\n                    \n                    <Icon name='dropdown' />\n                    Generated Aggregation Query\n                </Accordion.Title>\n                <Accordion.Content active={activeIndex === 0}>\n                    <SyntaxHighlighter showLineNumbers={true} language=\"json\" style={docco}>\n                        {this.props.query}    \n                    </SyntaxHighlighter>    \n                </Accordion.Content>\n            </Accordion>\n        )\n    }\n}\n\nexport default Information","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Form, Checkbox, Input } from 'semantic-ui-react';\nimport TickerAnalysisContext from './TickerAnalysisContext';\n\n\nclass MAFilter extends React.Component {\n\n    render () {\n        return (\n            \n                    <Form.Group inline>\n                        <Form.Field>\n                            <Checkbox \n                                label={this.props.name} \n                                checked={this.context.enabledFilters.movingAverage[this.props.number]}\n                                onClick={() => this.context.toggleMovingAverage(this.props.number)} />    \n                        </Form.Field>\n                        <Form.Field>\n                            <Input \n                                value={this.context.movingAverageFilters[this.props.number]} \n                                disabled={!this.context.enabledFilters.movingAverage[this.props.number]}\n                                type=\"number\" \n                                label=\"# of previous data points:\" \n                                onChange={(x) => this.context.setMovingAverageFilter(this.props.number,x.currentTarget.value)}>\n                            </Input>\n                        </Form.Field>\n                    </Form.Group>\n        )\n    }\n}\nMAFilter.contextType = TickerAnalysisContext\nexport default MAFilter","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Form, Checkbox, Input } from 'semantic-ui-react';\nimport TickerAnalysisContext from './TickerAnalysisContext';\n\nclass MACDFilter extends React.Component {\n\n    render () {\n        return (\n                    <Form.Group inline>\n                        <Form.Field>\n                            <Checkbox \n                                label={this.props.name} \n                                checked={this.context.enabledFilters.macd} \n                                onClick={() => this.context.toggleMacd()} />    \n                        </Form.Field>\n                        <Form.Field>\n                            <Input \n                                value={this.context.numOfPrevDataPointsMacdLine1} \n                                disabled={!this.context.enabledFilters.macd} \n                                type=\"number\" \n                                label=\"# of previous data points for first param of MACD Line:\" \n                                onChange={(x) => this.context.setNumOfPrevDataPointsMacdLine1(x.currentTarget.value)}>\n                            </Input>\n                            <Input \n                                value={this.context.numOfPrevDataPointsMacdLine2} \n                                disabled={!this.context.enabledFilters.macd} \n                                type=\"number\" \n                                label=\"# of previous data points for second param of MACD Line:\" \n                                onChange={(x) => this.context.setNumOfPrevDataPointsMacdLine2(x.currentTarget.value)}>\n                            </Input>\n                            <Input \n                                value={this.context.numOfPrevDataPointsMacdSignal} \n                                disabled={!this.context.enabledFilters.macd} \n                                type=\"number\" \n                                label=\"# of previous data points MACD Signal Line:\" \n                                onChange={(x) => this.context.setNumOfPrevDataPointsMacdSignal(x.currentTarget.value)}>\n                            </Input>\n                        </Form.Field>\n                    </Form.Group>\n        )\n    }\n}\n\nMACDFilter.contextType = TickerAnalysisContext\nexport default MACDFilter","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Form, Checkbox, Input } from 'semantic-ui-react';\nimport TickerAnalysisContext from './TickerAnalysisContext';\n\nclass RSIFilter extends React.Component {\n \n    \n    render () {\n        return (\n                    <Form.Group inline>\n                        <Form.Field>\n                            <Checkbox \n                                label={this.props.name} \n                                checked={this.context.enabledFilters.rsi}\n                                onClick={() => this.context.toggleRSI()} \n                            />    \n                        </Form.Field>\n                        <Form.Field>\n                            <Input \n                                value={this.context.numOfPrevDataPointsRSI} \n                                disabled={!this.context.enabledFilters.rsi} \n                                type=\"number\" \n                                label=\"# of previous data points:\" \n                                onChange={(x) => this.context.setNumOfPrevDataPointsRSI(x.currentTarget.value)}>\n                            </Input>\n                        </Form.Field>\n                    </Form.Group>\n        )\n    }\n}\nRSIFilter.contextType = TickerAnalysisContext\nexport default RSIFilter","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Form, Checkbox, Input } from 'semantic-ui-react';\nimport TickerAnalysisContext from './TickerAnalysisContext';\n\nclass StochasticOscillatorFilter extends React.Component {\n \n    \n    render () {\n        return (\n                    <Form.Group inline>\n                        <Form.Field>\n                            <Checkbox \n                                label={this.props.name} \n                                checked={this.context.enabledFilters.stochasticOscillator}\n                                onClick={() => this.context.toggleStochasticOscillator()} \n                            />    \n                        </Form.Field>\n                        <Form.Field>\n                            <Input \n                                value={this.context.numOfPrevDataPointsStochasticOscillator} \n                                disabled={!this.context.enabledFilters.stochasticOscillator} \n                                type=\"number\" \n                                label=\"# of previous data points:\" \n                                onChange={(x) => this.context.setNumOfPrevDataPointsnumOfPrevDataPointsStochasticOscillator(x.currentTarget.value)}>\n                            </Input>\n                        </Form.Field>\n                    </Form.Group>\n        )\n    }\n}\nStochasticOscillatorFilter.contextType = TickerAnalysisContext\nexport default StochasticOscillatorFilter","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Button, Segment, Form, Dimmer, Loader, Label, Icon, Accordion } from 'semantic-ui-react';\nimport TickerFilter from './TickerFilterComponent'\nimport IntervalFilter from '../common/IntervalFilter'\nimport DateFilter from '../common/DateFilter'\nimport TickerTableData from './TickerTableDataComponent'\nimport TickerChart from './TickerChart'\nimport Information from '../common/Information'\nimport MAFilter from './MAFilterComponent'\nimport MACDFilter  from './MACDFilterComponent';\nimport RSIFilter from './RSIFilterComponent';\nimport TickerAnalysisContext from './TickerAnalysisContext';\nimport moment from 'moment'\nimport StochasticOscillatorFilter from './StochasticOscillatorFilterComponent';\n\n\n\nclass TickerAnalysisComponent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.defaultQuery = \"// It will be updated just after the query is executed \\ndb.{collectionName}.aggregate([...])\"\n        this.state = {\n            currencyHistoryDataForTable: undefined,\n            renderTable: false,\n            renderChart: false,\n            queryIsRunning : false,\n            query: this.defaultQuery,\n            currency : \"\",\n            interval : 1,\n            hourFilter: 72,\n            isStatisticsAccordionOpen : false,\n            enabledFilters : {\n                movingAverage:[false, false, false, false],\n                macd: false,\n                rsi: false,\n                stochasticOscillator: false\n            },\n            latestInformation : {\n                isQueryRunning: true,\n                latestCurrencyDateLocalStr : \"Loading ...\",\n                firstCurrencyDateLocalStr: \"Loading ...\"\n            },\n            movingAverageFilters: [1,1,1,1],\n            numOfPrevDataPointsMacdLine1: 12,\n            numOfPrevDataPointsMacdLine2: 26,\n            numOfPrevDataPointsMacdSignal: 9,\n            numOfPrevDataPointsRSI: 14,\n            numOfPrevDataPointsStochasticOscillator: 14,\n\n            htmlTableData: {\n                currencyData: undefined\n            },\n            chartData: {\n                candleStick: [],\n                movingAverage01: [],\n                movingAverage02: [],\n                expMovingAverage01: [],\n                expMovingAverage02: [],\n                macdLine: [],\n                macdSignal: [],\n                macdHistogram: [],\n                rsi: [],\n                stocOsscK: [],\n                stocOsscD: []\n            }\n        }\n    }\n\n\n    fetchLatestInfo() {\n\n        this.setState({latestInformation: {isQueryRunning: true}})\n        this.props.user.functions.GetLatestTSCollectionStatistics().then(\n            data => {\n                let result = data\n                result.latestCurrencyDateLocalStr=moment(result.latestCurrencyDate).local().format();\n                result.firstCurrencyDateLocalStr=moment(result.firstCurrencyDate).local().format();\n\n                this.setState({\n                    latestInformation: {\n                        isQueryRunning: false,\n                        latestCurrencyDateLocalStr: moment(result.latestCurrencyDate).local().format(),\n                        firstCurrencyDateLocalStr: moment(result.firstCurrencyDate).local().format(),\n                        totalNumberOfRecords: result.totalNumberOfRecords,\n                        totalNumberOfBuckets: result.totalNumberOfBuckets\n                    }\n                });\n            }\n\n        )\n        \n      \n    }\n\n    UNSAFE_componentWillMount() { this.fetchLatestInfo() }\n\n    fetchAndRender (type) { \n        this.setState({queryIsRunning: true})\n\n        let parameterObject = {\n            symbol: this.state.currency,\n            hourFilter: this.state.hourFilter,\n            candleStickUnit: \"minute\",\n            candleStickInterval: this.state.interval,\n            ma1: (this.state.enabledFilters.movingAverage[0]) ? parseInt(this.state.movingAverageFilters[0]) : null,\n            ma2: (this.state.enabledFilters.movingAverage[1]) ? parseInt(this.state.movingAverageFilters[1]) : null,\n            ema1: (this.state.enabledFilters.movingAverage[2]) ? parseInt(this.state.movingAverageFilters[2]) : null,\n            ema2: (this.state.enabledFilters.movingAverage[3]) ? parseInt(this.state.movingAverageFilters[3]) : null,\n            macd1: (this.state.enabledFilters.macd) ? parseInt(this.state.numOfPrevDataPointsMacdLine1) : null,\n            macd2: (this.state.enabledFilters.macd) ? parseInt(this.state.numOfPrevDataPointsMacdLine2) : null,\n            macdSignal: (this.state.enabledFilters.macd) ? parseInt(this.state.numOfPrevDataPointsMacdSignal) : null,\n            rsi: (this.state.enabledFilters.rsi)? parseInt(this.state.numOfPrevDataPointsRSI) : null,\n            stocOsc: (this.state.enabledFilters.stochasticOscillator) ? parseInt(this.state.numOfPrevDataPointsStochasticOscillator) : null\n        }\n\n        this.props.user.functions.GetTickerReport(parameterObject).then(data =>\n            {\n                let result = data.result\n                let query = JSON.stringify(data.query, null, 4)\n\n                if (type === \"TABLE\") {\n                    let currencyHistory = result.map((currency) => {\n                        return currency\n                    });\n                    this.setState({query: query, currencyHistoryDataForTable: currencyHistory})                \n                    this.setState({queryIsRunning: false})\n                    this.renderTable()\n                }\n                else if (type === \"CHART\") {\n                \n                    // keep maximum last 100 elements of result array to mitigate chart freezing in the case of huge data\n                    let optimizedArray = result.slice(Math.max(result.length-100,0))\n                    optimizedArray = optimizedArray.map(x => {\n                        x.localTimeStr = moment.utc(x._id.time).local().format()\n                        return x\n                    })\n    \n                  \n                    \n                    // candlestick chart update\n                    let candleStickData = optimizedArray.map((currency) => {\n                        return {\"x\": currency.localTimeStr, \"y\": [currency.open,currency.high,currency.low,currency.close]}\n                    });\n    \n                    // MA 1 - line chart update\n                    let movingAverageData_01 = optimizedArray.map((currency) => {\n                        return {\"x\": currency.localTimeStr, \"y\" : currency.movingAverage01}\n                    });\n                    \n                    // MA 2 - line chart update\n                    let movingAverageData_02 = optimizedArray.map((currency) => {\n                        return {\"x\": currency.localTimeStr, \"y\" : currency.movingAverage02}\n                    });\n    \n                    // EMA 1 - line chart update\n                    let expMovingAverageData_01 = optimizedArray.map((currency) => {\n                        return {\"x\": currency.localTimeStr, \"y\" : currency.expMovingAverage01}\n                    });\n    \n                    // EMA 2 - line chart update\n                    let expMovingAverageData_02 = optimizedArray.map((currency) => {\n                        return {\"x\": currency.localTimeStr, \"y\" : currency.expMovingAverage02}\n                    });\n    \n                    var macdLineData = null\n                    var macdSignalData = null\n                    var macdHistogramData = null\n                    if (this.state.numOfPrevDataPointsMacdLine1 !== 0) {\n                        // draw MACD chart\n                        macdLineData = optimizedArray.map((currency) => {\n                            return {\"x\": currency.localTimeStr, \"y\" : currency.macdLine}\n                        });\n    \n                        macdSignalData = optimizedArray.map((currency) => {\n                            return {\"x\": currency.localTimeStr, \"y\" : currency.macdSignal}\n                        });\n    \n                        macdHistogramData = optimizedArray.map((currency) => {\n                            return {\"x\": currency.localTimeStr, \"y\" : currency.macdHistogram}\n                        });\n    \n                    }\n    \n    \n                    var rsiData = null\n                    if (this.state.numOfPrevDataPointsRSI !== 0) {\n                        rsiData = optimizedArray.map((currency) => {\n                            return {\"x\": currency.localTimeStr, \"y\" : currency.rsi}\n                        });\n                    }\n    \n                    var stocOsscDataKValue = null\n                    var stocOsscDataDValue = null\n                    if (this.state.numOfPrevDataPointsStochasticOscillator !== 0) {\n                        stocOsscDataKValue = optimizedArray.map((currency) => {\n                            return {\"x\": currency.localTimeStr, \"y\" : currency.stocOsscKValue}\n                        });\n    \n                        stocOsscDataDValue = optimizedArray.map((currency) => {\n                            return {\"x\": currency.localTimeStr, \"y\" : currency.stocOsscDValue}\n                        });\n                    }\n    \n    \n                    this.setState({\n                        query: query, \n                        chartData: {\n                            candleStick: candleStickData,\n                            movingAverage01: movingAverageData_01,\n                            movingAverage02: movingAverageData_02,\n                            expMovingAverage01: expMovingAverageData_01,\n                            expMovingAverage02: expMovingAverageData_02,\n                            macdLine: macdLineData,\n                            macdSignal: macdSignalData,\n                            macdHistogram: macdHistogramData,\n                            rsi: rsiData,\n                            stocOsscK: stocOsscDataKValue,\n                            stocOsscD: stocOsscDataDValue\n                        }\n                    })\n                    this.setState({queryIsRunning: false})\n                    this.renderChart()\n                }\n            }    \n        )\n \n    }\n\n    renderTable() {\n        this.setState({renderTable: false})\n        this.setState({renderChart: false})\n        this.setState({renderTable: true})\n    }\n    \n    renderChart() {\n        this.setState({renderChart: false})\n        this.setState({renderTable: false})\n        this.setState({renderChart: true})\n    }\n\n    handleInterval(value) {\n        this.setState({interval: value})\n    }\n\n    handleHourFilter(value) {\n        this.setState({hourFilter: value})\n    }\n    \n    handleSymbol(value) {\n        this.setState({currency: value})\n\n    }\n\n\n  \n    render () {\n        \n        return (\n\n            <TickerAnalysisContext.Provider value={{\n\n                movingAverageFilters: this.state.movingAverageFilters,\n                setMovingAverageFilter: (index, value) => {\n                    const movingAverageFilters = Object.assign({}, this.state.movingAverageFilters);\n                    movingAverageFilters[index] = value;\n                    this.setState({\n                        movingAverageFilters: movingAverageFilters\n                    })\n                },\n\n                numOfPrevDataPointsMacdLine1: this.state.numOfPrevDataPointsMacdLine1,\n                setNumOfPrevDataPointsMacdLine1: value => {\n                    this.setState({numOfPrevDataPointsMacdLine1: value})\n                },\n\n                numOfPrevDataPointsMacdLine2: this.state.numOfPrevDataPointsMacdLine2,\n                setNumOfPrevDataPointsMacdLine2: value => {\n                    this.setState({numOfPrevDataPointsMacdLine2: value})\n                },\n\n                numOfPrevDataPointsMacdSignal: this.state.numOfPrevDataPointsMacdSignal,\n                setNumOfPrevDataPointsMacdSignal: value => {\n                    this.setState({numOfPrevDataPointsMacdSignal: value})\n                },\n\n                numOfPrevDataPointsRSI: this.state.numOfPrevDataPointsRSI,\n                setNumOfPrevDataPointsRSI: value => {\n                    this.setState({numOfPrevDataPointsRSI: value})\n                },\n\n                numOfPrevDataPointsStochasticOscillator: this.state.numOfPrevDataPointsStochasticOscillator,\n                setNumOfPrevDataPointsnumOfPrevDataPointsStochasticOscillator: value => {\n                    this.setState({numOfPrevDataPointsStochasticOscillator: value})\n                },\n\n                \n\n                enabledFilters: this.state.enabledFilters,\n                toggleMovingAverage: index => {\n                    let _tmp_moving_average = this.state.enabledFilters.movingAverage.slice()\n                    _tmp_moving_average[index] = !_tmp_moving_average[index]\n\n                    const newState = {...this.state.enabledFilters, movingAverage: _tmp_moving_average}\n                    this.setState({enabledFilters: newState})\n                    \n                },\n\n                toggleMacd: () => {\n                    const newState = {...this.state.enabledFilters, macd: !this.state.enabledFilters.macd}\n                    this.setState({enabledFilters: newState})\n\n                },\n\n                toggleRSI: () => {\n                    const newState = {...this.state.enabledFilters, rsi: !this.state.enabledFilters.rsi}\n                    this.setState({enabledFilters: newState})\n                },\n\n                toggleStochasticOscillator: () => {\n                    const newState = {...this.state.enabledFilters, stochasticOscillator: !this.state.enabledFilters.stochasticOscillator}\n                    this.setState({enabledFilters: newState})\n                },\n\n                chartData: this.state.chartData,\n                currencyHistoryDataForTable: this.state.currencyHistoryDataForTable\n\n            }}>\n                    <div className=\"ui padded grid\">\n                        <div className=\"one column row\">\n                            <div className=\"column\">\n                                \n\n                                <Segment>\n                                <Accordion>\n                                    <Accordion.Title\n                                        active={this.state.isStatisticsAccordionOpen}\n                                        index={0}\n                                        onClick={() => this.setState({isStatisticsAccordionOpen: !this.state.isStatisticsAccordionOpen})}>\n                                        \n                                        <Icon name='dropdown' />\n                                        Latest Information\n                                    </Accordion.Title>\n                                    <Accordion.Content active={this.state.isStatisticsAccordionOpen}>\n                                        <Button size='mini' icon color='green' onClick={() => this.fetchLatestInfo()} ><Icon name='refresh'/></Button>\n                                        <br/>\n                                        <Label>\n                                            <Icon name='clock outline' />\n                                            Latest Record Date-Time:\n                                            <Label.Detail>{  this.state.latestInformation.isQueryRunning ? \"Please wait, loading...\" : this.state.latestInformation.latestCurrencyDateLocalStr}</Label.Detail>\n                                        </Label>\n                                        <br/>\n                                        <Label>\n                                            <Icon name='clock outline' />\n                                            First Record Date-Time:\n                                            <Label.Detail>{  this.state.latestInformation.isQueryRunning ? \"Please wait, loading...\" : this.state.latestInformation.firstCurrencyDateLocalStr}</Label.Detail>\n                                        </Label>\n                                        <br/>\n                                        <Label>\n                                            <Icon name='hashtag' />\n                                            Number of Records:\n                                            <Label.Detail>~{  this.state.latestInformation.isQueryRunning ? \"Please wait, loading...\" : this.state.latestInformation.totalNumberOfRecords}</Label.Detail>\n                                        </Label>\n                                        <Label>\n                                            <Icon name='hashtag' />\n                                            Number of Buckets:\n                                            <Label.Detail>{  this.state.latestInformation.isQueryRunning ? \"Please wait, loading...\" : this.state.latestInformation.totalNumberOfBuckets}</Label.Detail>\n                                        </Label>\n                                    </Accordion.Content>\n                                </Accordion>\n                                </Segment>    \n                                <Segment>\n                                    <Form>\n                                        <TickerFilter user={this.props.user} symbolHandler={(x) => this.handleSymbol(x)}/>\n                                        <DateFilter sendController={(x) => this.handleHourFilter(x)}/>\n                                        <IntervalFilter sendController={(x) => this.handleInterval(x)}/>\n                                        <MAFilter name=\"Moving average 1\" number={0}/>\n                                        <MAFilter name=\"Moving average 2\" number={1}/>\n                                        <MAFilter name=\"Exponential Moving average 1\" number={2}/>\n                                        <MAFilter name=\"Exponential Moving average 2\" number={3}/>\n                                        <MACDFilter name=\"MACD Filter\"/>\n                                        <RSIFilter name=\"RSI Filter\"/>\n                                        <StochasticOscillatorFilter name=\"Stochastic Oscillator Filter\"/>\n                                        <Button icon labelPosition='right' disabled={this.state.currency===\"\"} color='green' onClick={() => this.fetchAndRender(\"CHART\")} ><Icon name='chart line'/>Show Charts</Button>\n                                        <Button icon labelPosition='right' disabled={this.state.currency===\"\"} color='green' onClick={() => this.fetchAndRender(\"TABLE\")} ><Icon name='numbered list'/>Show Data</Button>\n                                    </Form>\n                                </Segment>\n                                {(this.state.renderTable || this.state.renderChart)?\n                                <Segment>\n                                    <Dimmer active={this.state.queryIsRunning}>\n                                            <Loader size=\"big\" indeterminate active={this.state.queryIsRunning}>Loading ...</Loader>\n                                    </Dimmer>\n                                    {this.state.renderTable ?<TickerTableData/> :null }\n                                    {this.state.renderChart ?<TickerChart/> :null}\n                                </Segment>\n                                : null\n                                }\n                                <Segment>\n                                    <Dimmer active={this.state.queryIsRunning}>\n                                            <Loader size=\"big\" indeterminate active={this.state.queryIsRunning}>Loading ...</Loader>\n                                    </Dimmer>\n                                    <Information query={this.state.query}  />\n\n                                </Segment>\n\n                            </div>\n                        </div>\n                    </div>\n                </TickerAnalysisContext.Provider>\n\n        )\n    }\n}\n\nexport default TickerAnalysisComponent","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Table } from 'semantic-ui-react';\nimport moment from 'moment'\n\n\nclass RuleStatistics extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = { \n            statsData: this.props.statisticsData\n        }\n    }\n    render () {\n\n        var arrayData = this.props.statisticsData;\n        return (\n            <Table celled striped>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Time</Table.HeaderCell>\n                <Table.HeaderCell>Symbol</Table.HeaderCell>\n                <Table.HeaderCell>Last Price</Table.HeaderCell>\n                <Table.HeaderCell>Method</Table.HeaderCell>\n                <Table.HeaderCell>Value of the Method</Table.HeaderCell>\n                <Table.HeaderCell>Threshold</Table.HeaderCell>\n                <Table.HeaderCell>Conditions MET</Table.HeaderCell>\n             </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {arrayData !== undefined ?\n                    arrayData.map(\n                        (item, index) => \n                            <Table.Row key={index}> \n                                <Table.Cell>{moment(item.time).local().format()}</Table.Cell>\n                                <Table.Cell>{item.symbol}</Table.Cell>\n                                <Table.Cell>{item.lastPrice}</Table.Cell>\n                                <Table.Cell>{item.method}</Table.Cell>\n                                <Table.Cell>{item.methodValue}</Table.Cell>\n                                <Table.Cell>{item.threshold}</Table.Cell>\n                                <Table.Cell>{item.conditionsMet ? \"true\" : \"false\" }</Table.Cell>\n                            </Table.Row> \n                    ) \n                : null\n                }\n            </Table.Body>\n            </Table>\n            \n        )}\n            \n            \n}\n\nexport default RuleStatistics","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport { Message, Divider, Button, Segment, Form, Container, Tab, Dropdown, Dimmer, Modal, Loader, Input, Table } from 'semantic-ui-react';\nimport TickerFilter from '../individual-currency/TickerFilterComponent';\nimport IntervalFilter from '../common/IntervalFilter';\nimport moment from 'moment'\nimport NumberInput from 'semantic-ui-react-numberinput';\nimport RuleStatistics from './RuleStatistics'\nimport * as Realm from \"realm-web\";\n\nconst {BSON: { ObjectId },} = Realm;\n\nconst dropDownOptionForMethods = [\n    { key: 1, text: 'Moving Average', value: \"MA\" },\n    { key: 2, text: 'Exponential Moving Average', value: \"EMA\" },\n    { key: 3, text: 'Relative Strength Index', value: \"RSI\" },\n  ]\n\nconst dropDownOptionComparison = [\n{ key: 1, text: 'Greater Than', value: \"$gt\" },\n{ key: 2, text: 'Lesser Than', value: \"$lt\" }\n]\n\nclass Rules extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            interval: 1,\n            method : \"MA\",\n            comparison: \"$gt\",\n            activeTab: 0,\n            ruleName: \"\",\n            recentNumberOfDataPointsToAnalyze: 5,\n            threshold: 10,\n            isAddRuleSuccessful: null,\n            rules : [],\n            isRuleDeleteVerificationOpen : false,\n            executionFrequency: 5,\n            isStatisticQueryRunning: false,\n            isStatisticsLoaded: false,\n            statisticsData: [],\n            symbol: \"\"\n        }\n    }\n\n    handleTabChange = (e, { activeIndex }) => {\n        this.setState({ activeTab: activeIndex })\n        if (activeIndex === 1) {\n            this.fetchRules()\n            this.setState({isStatisticsLoaded: false})\n        }\n    }\n\n    fetchRules () {\n        this.setState({queryIsRunning: true})\n\n        this.props.user.mongoClient('mongodb-atlas').db('exchange').collection('rules').find({}).then(\n            result => {\n                this.setState({rules: result})\n                this.setState({queryIsRunning: false})\n            })\n        \n    }\n\n    handleInterval(value) {\n        this.setState({interval: value})\n    }\n\n    handleHourFilter(value) {\n        this.setState({hourFilter: value})\n    }\n    \n    handleSymbol(value) {\n        this.setState({currency: value})\n        console.log(\"SELECTED CURRENCY:\" + value)\n\n    }\n\n    handleMethod (value) {\n        this.setState({method: value})\n    }\n\n    handleComparison (value) {\n        this.setState({comparison: value})\n    }\n\n\n    saveRule () { \n        let rule = {\n            ruleName: this.state.ruleName,\n            interval: this.state.interval,\n            symbol: this.state.currency,\n            method: this.state.method,\n            numOfDataPointsToAnalyze: parseInt(this.state.recentNumberOfDataPointsToAnalyze),\n            threshold: parseInt(this.state.threshold),\n            comparison: this.state.comparison,\n            createdAt: new Date()\n        }\n\n        this.setState({queryIsRunning: true})\n        this.props.user.mongoClient('mongodb-atlas').db('exchange').collection('rules').insertOne(rule).then(\n            result => {\n                this.setState({queryIsRunning: false})\n                if (result.insertedId !== \"\" ) {\n                    this.setState({\n                        isAddRuleSuccessful: true,\n                        addRuleMessage: result.insertedId,\n                        addRuleMessageHeader: \"Rule has been added successfully.\"\n                    })\n                } else {\n                    this.setState({\n                        isAddRuleSuccessful: false,\n                        addRuleMessage: \"ERROR\",\n                        addRuleMessageHeader: \"Rule has not been added.\"\n                    })\n                }\n        }\n        )\n\n    }\n\n\n    removeRuleStatistics(_id) {\n        this.setState({queryIsRunning: true })\n\n        this.props.user.mongoClient('mongodb-atlas').db('exchange').collection('ruleStatistics').deleteOne({\"_id\": ObjectId(_id)}).then(\n            result => {\n                this.setState({queryIsRunning: false })\n            }\n        )\n    }\n\n    removeRule (_id) {\n        this.props.user.mongoClient('mongodb-atlas').db('exchange').collection('rules').deleteOne({\"_id\": ObjectId(_id)}).then(\n            result => {\n                if (result.deletedCount === 1) {\n                    let rules = this.state.rules.slice()\n                    rules = rules.filter( x =>  x._id !== _id)\n                    \n                    this.setState({rules: rules, isStatisticsLoaded: false})\n                    this.removeRuleStatistics(_id) // no need to track\n                }\n            }\n        )\n\n    }\n\n    fetchStatisticsForARule(_id) {\n        this.setState({isStatisticQueryRunning: true, isStatisticsLoaded: false})\n\n\n        this.props.user.mongoClient('mongodb-atlas').db('exchange').collection('ruleStatistics').find({\"ruleId\": ObjectId(_id)}).then(\n            result => {\n                this.setState({statisticsData: result, isStatisticsLoaded: true, isStatisticQueryRunning: false})\n            })\n    }\n\n    handleRuleNameChange (value) {\n        this.setState({ruleName: value})\n    }\n\n    render () {\n        return (\n            <Container fluid>\n                <Tab\n                    activeIndex={this.state.activeTab}\n                    onTabChange={this.handleTabChange}\n                    panes={[\n                        {\n                            menuItem: 'Rule Add',\n                            render: () => \n                                        <>\n                                        <Segment>              \n                                            <Form>\n                                                <Form.Field required>\n                                                        <label>Rule Name</label>\n                                                        <Input placeholder=\"Give a name to rule to identify rule later\" value={this.state.ruleName} onChange={(event,data) => this.handleRuleNameChange(data.value)}/>\n                                                </Form.Field>\n                                                <TickerFilter user={this.props.user} symbolHandler={(x) => this.handleSymbol(x)}/>\n                                                <IntervalFilter sendController={(x) => this.handleInterval(x)}/>\n\n                                                <Form.Group widths={12}>\n                                                    <Form.Field required width={3}>\n                                                            <label>Analyze the recent</label>\n                                                            <NumberInput \n                                                                    stepAmount={1} \n                                                                    minValue={1} \n                                                                    maxValue={120} \n                                                                    value={this.state.recentNumberOfDataPointsToAnalyze} \n                                                                    onChange={(data) => this.setState({recentNumberOfDataPointsToAnalyze:data})} />\n                                                            \n                                                    </Form.Field>                  \n                                                    <Form.Field width={2}>\n                                                            <label>&nbsp;</label>\n                                                            <p> <br/> # of data points </p>\n                                                    </Form.Field>  \n                                                    <Form.Field required width={6}>\n                                                            <label>Apply the Method</label>              \n                                                            <Dropdown\n                                                                placeholder='Compact'\n                                                                compact\n                                                                selection\n                                                                value={this.state.method}\n                                                                onChange={(event,data) => this.handleMethod(data.value)}\n                                                                options={dropDownOptionForMethods}\n                                                            />\n                                                    </Form.Field>                    \n                                                </Form.Group>\n                                                <Divider/>\n                                                <Form.Group widths={12}>\n   \n                                                    <Form.Field width={3}>\n                                                            <label>If {this.state.method} is</label>\n                                                            <Dropdown\n                                                                compact\n                                                                selection\n                                                                value={this.state.comparison}\n                                                                onChange={(event,data) => this.handleComparison(data.value)}\n                                                                options={dropDownOptionComparison}\n                                                            />\n                                                    </Form.Field>    \n                                                    <Form.Field width={3}>\n                                                            <label>&nbsp;</label>\n                                                            <NumberInput \n                                                                    valueType=\"decimal\"\n                                                                    stepAmount={1} \n                                                                    minValue={0} \n                                                                    maxValue={100000} \n                                                                    precision={4}\n                                                                    value={this.state.threshold} \n                                                                    onChange={(data) => this.setState({threshold:data})} />\n                                                            \n                                                            \n                                                    </Form.Field>        \n                                                </Form.Group>            \n                                                \n                                                <Button disabled={this.state.queryIsRunning} color='green' onClick={() => this.saveRule()} >Add Rule</Button>\n                                            </Form>\n                                        </Segment>\n                                        <Segment hidden={this.state.isAddRuleSuccessful == null}>\n                                            <Dimmer active={this.state.queryIsRunning}>\n                                                <Loader size=\"big\" indeterminate active={this.state.queryIsRunning}>Rule is being added ...</Loader>\n                                            </Dimmer>\n\n                                            <Message\n                                                success={this.state.isAddRuleSuccessful}\n                                                negative={!this.state.isAddRuleSuccessful}\n                                                hidden={this.state.isAddRuleSuccessful == null}\n                                                header={this.state.addRuleMessageHeader}\n                                                content={this.state.addRuleMessage}\n                                            />\n                                        </Segment>\n                                        </>\n                                        \n                        },\n                        {\n                            menuItem: 'List Rules',\n                            render: () => <>\n                                          <Segment>\n                                             <Dimmer active={this.state.queryIsRunning}>\n                                                <Loader size=\"big\" indeterminate active={this.state.queryIsRunning}>Loading data ...</Loader>\n                                            </Dimmer>\n\n                                          <Table celled striped>\n                                            <Table.Header>\n                                                <Table.Row>\n                                                    <Table.HeaderCell>Rule Name</Table.HeaderCell>\n                                                    <Table.HeaderCell>Symbol</Table.HeaderCell>\n                                                    <Table.HeaderCell>Added Time</Table.HeaderCell>\n                                                    <Table.HeaderCell>Interval</Table.HeaderCell>\n                                                    <Table.HeaderCell>Method</Table.HeaderCell>\n                                                    <Table.HeaderCell>Comparison</Table.HeaderCell>\n                                                    <Table.HeaderCell>Threshold</Table.HeaderCell>\n                                                    <Table.HeaderCell># of Data Points</Table.HeaderCell>\n                                                    <Table.HeaderCell>Statistics</Table.HeaderCell>\n                                                    <Table.HeaderCell>Remove Rule</Table.HeaderCell>\n                                                </Table.Row>\n                                            </Table.Header>\n                                            <Table.Body>\n                                                {this.state.rules !== undefined ?\n                                                this.state.rules.map((item, index) => \n                                                <Table.Row key={index}> \n                                                    <Table.Cell>{item.ruleName}</Table.Cell>\n                                                    <Table.Cell>{item.symbol}</Table.Cell>\n                                                    <Table.Cell>{moment(item.createdAt).local().format()}</Table.Cell>\n                                                    <Table.Cell>{item.interval}</Table.Cell>\n                                                    <Table.Cell>{item.method}</Table.Cell>\n                                                    <Table.Cell>{item.comparison}</Table.Cell>\n                                                    <Table.Cell>{item.threshold}</Table.Cell>\n                                                    <Table.Cell>{item.numOfDataPointsToAnalyze}</Table.Cell>\n                                                    <Table.Cell><Button onClick={() => this.fetchStatisticsForARule(item._id)} circular icon='list'/></Table.Cell>\n                                                    <Table.Cell><Button onClick={() => this.setState({isRuleDeleteVerificationOpen: true, chosenRuleId: item._id, chosenRuleName: item.ruleName})} circular icon='remove circle'/></Table.Cell>\n                                                    \n                                                </Table.Row>\n                                               \n                                                ) \n                                                : null\n                                                }\n                                            </Table.Body>\n                                            </Table>\n                                               <Modal\n                                                    size=\"tiny\"\n                                                    open={this.state.isRuleDeleteVerificationOpen}\n                                                    onClose={() => this.setState({isRuleDeleteVerificationOpen: false})}\n                                                    >\n                                                <Modal.Header>{`Rule ${this.state.chosenRuleName}`}</Modal.Header>\n                                                <Modal.Content>\n                                                    <p>Are you sure you want to delete this rule?</p>\n                                                </Modal.Content>\n                                                <Modal.Actions>\n                                                    <Button negative onClick={() => this.setState({isRuleDeleteVerificationOpen: false})}>No</Button>\n                                                    <Button\n                                                    positive\n                                                    icon=\"checkmark\"\n                                                    labelPosition=\"right\"\n                                                    content=\"Yes\"\n                                                    onClick={() => {this.removeRule(this.state.chosenRuleId); this.setState({isRuleDeleteVerificationOpen: false})} }\n                                                    />\n                                                </Modal.Actions>\n                                                </Modal>\n                                          </Segment>\n                                          <Segment hidden={!this.state.isStatisticsLoaded && !this.state.isStatisticQueryRunning}>\n                                            <Dimmer active={this.state.isStatisticQueryRunning}>\n                                                <Loader size=\"big\" indeterminate active={this.state.isStatisticQueryRunning}>Loading statistics ...</Loader>\n                                            </Dimmer>\n                                            { this.state.isStatisticsLoaded ? \n                                                <RuleStatistics statisticsData={this.state.statisticsData}/>\n                                                : null }\n                                         </Segment>\n                                         \n                                         </> \n                        }\n\n                    ]}\n                    \n                />\n            </Container>\n        )\n    }\n}\n\n\nexport default Rules","import React from 'react';\nimport 'fomantic-ui-css/semantic.css';\nimport * as Realm from \"realm-web\";\nimport { Switch, Route, Redirect } from 'react-router-dom';\n// import Home from './Home';\nimport TickerAnalysisComponent from '../individual-currency/TickerAnalysisComponent'\nimport Rules from '../rules/Rules'\n\nconst app = new Realm.App({ id: `${window['getConfig'].REALM_APP_ID}` });\n\nconst styles = {width: \"200px\"};\nconst logoStyles = {width: \"100px\"}\n\nfunction Login({ setUser }) {\n  const loginAnonymous = async () => {\n    const user = await app.logIn(Realm.Credentials.anonymous());\n    setUser(user);\n  };\n  loginAnonymous()\n  //return <button onClick={loginAnonymous}>Log In</button>;\n  // auto logging\n  return (<div>Logging in...</div>)\n}\n\nfunction Menu ({ user }) {\n  return (\n    <div className=\"ui container\">\n      <div className=\"ui massive menu\">\n        <a className=\"item\" href=\"/\">\n          Home\n        </a>\n        <a className=\"item\" href=\"/currency\">\n          Currency Analysis\n        </a>\n        \n        <a className=\"item\" href=\"/rules\">\n          Rules\n        </a>\n        <div className=\"right menu\">\n          <a className=\"item\" href=\"https://cloud.mongodb.com\" target=\"_blank\" rel=\"noreferrer\">\n            <img alt=\"\" src=\"/mdblogo.svg\" style={styles}/>          \n            \n          </a>\n          <a className=\"item\" href=\"https://docs.mongodb.com/manual/core/timeseries-collections/\" target=\"_blank\" rel=\"noreferrer\">\n            <img alt=\"\" src=\"/ts.avif\" style={logoStyles}></img>\n          </a>\n        </div>\n      </div>\n      <Switch> {/* The Switch decides which component to show based on the current URL.*/}\n      <Route exact path='/'><Redirect to=\"/currency\" /></Route>\n      <Route exact path='/currency' render={(props) => <TickerAnalysisComponent user={user} {...props} /> } ></Route>\n      <Route exact path='/rules' render={(props) => <Rules user={user} {...props} /> } ></Route>\n      </Switch>\n      <div style={{display:'none'}}>User id: {user.id}</div>\n    </div>\n  )\n}\n\nconst App = () => {\n\n  \n  \n    // Keep the logged in Realm user in local state. This lets the app re-render\n    // whenever the current user changes (e.g. logs in or logs out).\n    const [user, setUser] = React.useState(app.currentUser);\n  \n    // If a user is logged in, show their details.\n    // Otherwise, show the login screen.\n    return (\n      <div>\n        \n          {user ? <Menu user={user}/> : <Login setUser={setUser} />}\n          \n      </div>\n    );\n};\n  \n  \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './main/App'\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n    <BrowserRouter>\n      <App /> {/* The various pages will be displayed by the `Main` component. */}\n    </BrowserRouter>\n    ), document.getElementById('root')\n);"],"sourceRoot":""}